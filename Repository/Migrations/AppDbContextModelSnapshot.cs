// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessProduct", b =>
                {
                    b.Property<int>("BusinessesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("BusinessesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("BusinessProduct");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("Core.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2621),
                            PlaceId = "ChIJyVyJIcM-yhQRmVL98P6vD-4"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2631),
                            PlaceId = "ChIJ1SkRIsM-yhQRDQUFyzsB0NU"
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2632),
                            PlaceId = "ChIJG4i1GMM-yhQRh26JXS9AXwY"
                        });
                });

            modelBuilder.Entity("Core.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2781),
                            Email = "emailBusiness1",
                            Name = "name1",
                            Password = "123456",
                            Username = "usernameBusiness1"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2783),
                            Email = "emailBusiness2",
                            Name = "name2",
                            Password = "123456",
                            Username = "usernameBusiness2"
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2785),
                            Email = "emailBusiness3",
                            Name = "name3",
                            Password = "123456",
                            Username = "usernameBusiness3"
                        });
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2872),
                            Name = "Kabuklu Kuruyemiş"
                        });
                });

            modelBuilder.Entity("Core.Models.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Diseases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(2988),
                            Name = "Histamin İntoleransı"
                        });
                });

            modelBuilder.Entity("Core.Models.Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3067),
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3066),
                            Email = "emailIndivudual1",
                            LastName = "lastname1",
                            Name = "name1",
                            Password = "123456",
                            Username = "usernameIdivual1"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3073),
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3072),
                            Email = "emailIndivudual2",
                            LastName = "lastname2",
                            Name = "name2",
                            Password = "123456",
                            Username = "usernameIdivual2"
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3074),
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3074),
                            Email = "emailIndivudual3",
                            LastName = "lastname3",
                            Name = "name3",
                            Password = "123456",
                            Username = "usernameIdivual3"
                        });
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3151),
                            Name = "fındık"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3152),
                            Name = "badem"
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3153),
                            Name = "ceviz"
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3154),
                            Name = "fıstık"
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2023, 5, 31, 0, 47, 5, 300, DateTimeKind.Local).AddTicks(3154),
                            Name = "kaju"
                        });
                });

            modelBuilder.Entity("DiseaseIndividual", b =>
                {
                    b.Property<int>("DiseasesId")
                        .HasColumnType("int");

                    b.Property<int>("IndividualsId")
                        .HasColumnType("int");

                    b.HasKey("DiseasesId", "IndividualsId");

                    b.HasIndex("IndividualsId");

                    b.ToTable("DiseaseIndividual");
                });

            modelBuilder.Entity("DiseaseProduct", b =>
                {
                    b.Property<int>("DiseasesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("DiseasesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("DiseaseProduct");
                });

            modelBuilder.Entity("BusinessProduct", b =>
                {
                    b.HasOne("Core.Models.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Core.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Address", b =>
                {
                    b.HasOne("Core.Models.Business", "Business")
                        .WithOne("Address")
                        .HasForeignKey("Core.Models.Address", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.HasOne("Core.Models.Product", null)
                        .WithMany("Components")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DiseaseIndividual", b =>
                {
                    b.HasOne("Core.Models.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Individual", null)
                        .WithMany()
                        .HasForeignKey("IndividualsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiseaseProduct", b =>
                {
                    b.HasOne("Core.Models.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Business", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
